exit
    current_user.lessons.each do |lesson| lesson end.where(current_user: 1)
    current_user.lessons.each do |lesson| lesson end
    current_user.lessons.each do |lesson| lesson end.first
    current_user.lessons.each do |lesson| lesson.lesson_responses end
    current_user.lessons.each do |lesson| lesson end
    current_user.lessons.each do |lesson| lesson.first end
    current_user.lessons.each do |lesson| lesson.lesson_responses end.first
    current_user.lessons.each do |lesson| lesson.lesson_responses end.find(1)
    current_user.lessons.each do |lesson| lesson.lesson_responses end.find(2)
    current_user.lessons.each do |lesson| lesson.lesson_responses.first end
    current_user.lessons.each do |lesson| lesson.lesson_responses end
    current_user.lessons.each do |lesson| lesson.lesson_responses end.find_by(id: 2)
    current_user.lessons.each do |lesson| lesson.lesson_responses end.find_by(id: "ruby classes")
    current_user.lessons.each do |lesson| lesson.lesson_responses end.find_by(lesson_name: "ruby classes")
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(lesson_name: "ruby classes")
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(lesson_id: 2).ids
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(id: 2).ids
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(id: 2)
    current_user.lessons.each do |lesson| lesson.lesson_responses end
    current_user.lessons.each do |lesson| lesson.lesson_responses end.
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(lesson_name: "ruby classes")
    current_user.lessons.each do |lesson| lesson.lesson_responses end.first
    current_user.lessons.each do |lesson| lesson.lesson_responses end.each{ |d| d.first}
    current_user.lessons.each do |lesson| lesson.lesson_responses end.each{ |d| d}
    current_user.lessons.each do |lesson| lesson.lesson_responses end.each{ |d| d/}
    current_user.lessons.each do |lesson| lesson.lesson_responses end.first
    current_user.lessons.each do |lesson| lesson.lesson_responses.first end
    current_user.lessons.each do |lesson| lesson.where(lesson_name: "Java") end
    current_user.lessons.each do |lesson| lesson.lesson_responses end.where(lesson_name: "ruby classes")
    current_user.lessons.each do |lesson| lesson.lesson_responses.where(lesson_name: "ruby classes") end
    current_user.lessons.each do |lesson| lesson.lesson_responses end
    current_user.lessons.each do |lesson| lesson end
    current_user.lessons.each do |lesson|
    end
      end
        end
          @completed << lr.marked_as_complete
        if lr.marked_as_complete == true && lr.user_id = current_user
      lesson.lesson_responses.each do |lr|
    current_user.lessons.each do |lesson|
/home/ryan/Documents/wyncode/fbu/facential/app/controllers/users_controller.rb
lesson
exit
@completed.count
@completed
exit
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.flatten!.map{ |d| d.marked_as_complete}
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.flatten!.marked_as_complete.count
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.flatten!.marked_as_complete
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.flatten!
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.marked_as_complete
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.each{ |mac| mac}.first
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.map{ |mac| mac}.first
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.map{ |mac| mac.marked_as_complete}
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}.marked_as_complete
current_user.lessons.each{|d| d}.map{ |m| m.lesson_responses}
current_user.lessons.each{|d| d}.map{ |m| m.lessons_responses}
current_user.lessons.each{|d| d}.map{ |m| m}
current_user.lessons.each{|d| d}.first.lesson_responses
current_user.lessons.each{|d| d}.first
current_user.lessons.each{|d| d.lesson_responses}.first
current_user.lessons.each{|d| d.lesson_responses}.first.marked_as_complete
current_user.lessons.each{|d| d.lesson_responses}.map{|m| m}.first
current_user.lessons.each{|d| d.lesson_responses}.map{|m| m.first}
current_user.lessons.each{|d| d.lesson_responses}.map{|m| m.marked_as_complete}
current_user.lessons.each{|d| d.lesson_responses}.map{|m| m}
current_user.lessons.each{|d| d.lesson_responses}.map{ }
current_user.lessons.each{|d| d.lesson_responses}
current_user.lessons.each{|d| d}-ad-
current_user.lessons.first.lesson_responses
current_user.lessons.first
current_user.lessons
current_user.lessons.completed
current_user.lessons
current_user
@completed.count
continue
latest_submission
continue
byebug
last_five
continue
n
continue
n
end
archive
continue
@archive
exit
archive.url
archive
continue
@archive_playback
continue
archive.url
archive
continue
archive = opentok.archives.find archive_id
continue
archive_id
stop_recording_lesson
continue
start_recording_lesson["id"]
start_recording_lesson
start_recording_session
continue
start_recording_lesson
continue
start_recording_lesson
continue
p session_record
continue
p session_record
continue
p OPENTOK_KEY
p session_record
continue
p session_record
continue
p session_record
continue
p session_record
continue
exit
continue
params
Topic
@topic
@lesson
@lesson.course_id
@lesson.course
instance_variables
exit
CONTINUE
OPENTOK_KEY
p OPENTOK_KEY
continue
token
session_id
OPENTOK_KEY
